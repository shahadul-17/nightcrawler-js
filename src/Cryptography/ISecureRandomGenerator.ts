export interface ISecureRandomGenerator {

  /**
   * Generates a single random byte value.
   * @returns Returns a promise that resolves to a randomly generated byte value.
   */
  generateByteAsync(): Promise<number>;

  /**
   * Generates a single random integer value.
   * @param digits Exact number of digits (between 1 to 10) the value should contain.
   * @param minimum Lower bound of range (minimum value).
   * @param maximum Upper bound of range (maximum value).
   * @returns Returns a promise that resolves to a randomly generated integer value.
   */
  generateIntegerAsync(digits?: number, minimum?: number, maximum?: number): Promise<number>;

  /**
   * Generates a single random long value.
   * @param digits Exact number of digits (between 1 to 10) the value should contain.
   * @param minimum Lower bound of range (minimum value).
   * @param maximum Upper bound of range (maximum value).
   * @returns Returns a promise that resolves to a randomly generated long value.
   */
  generateLongAsync(digits?: number, minimum?: number, maximum?: number): Promise<number>;

  /**
   * Generates a single random character.
   * @returns Returns a promise that resolves to a randomly generated character.
   */
  generateCharacterAsync(): Promise<string>;

  /**
   * Generates random string (sequence of characters).
   * @param length Length of the random string.
   * @returns Returns a promise that resolves to a randomly generated string.
   */
  generateStringAsync(length: number): Promise<string>;
}
